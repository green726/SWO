print! 1
print 1
println! 1
println 1
main 1
@main 1
var 1
const 1
int 1
double 1
string 1
for 1
if 1
else 1
in 1


use stdlib.io.printf
use stdlib.io
use stdlib

mut x = 0
const y = 0

{printf string format int x} []

{test1} [
print(1 + 1)
]

{test2} [
print(2 + 2)
]

{main} [
test1[]
test2[]
]

--------

@printf(string format, int x) {}

@test1() {
print!(1 + 1)
}

@test2() {
print!(2 + 2)
}

@main() {
test1()
test2()
}

--------

fn printf(string format, int x) {}

fn test1() {
print(1 + 1)
}

fn test2() {
print(2 + 2)
}

fn test3() {
test1()
test2()
}

--------

















mine:

define double @main() {
entry:
  br label %loop

loop:                                             ; preds = %loop, %entry
  %i = phi double [ 0.000000e+00, %entry ], [ %nextvar, %loop ]
  %calltmp = call double @printf([3 x i8]* @strtmp, double %i)
  %nextvar = fadd double %i, 1.000000e+00
  %comparetmp = fcmp ult double 1.000000e+01, %i
  %loopcond = fcmp one i1 %comparetmp, float 0.000000e+00
  br i1 %comparetmp, label %loop, label %postloop

postloop:                                         ; preds = %loop
  ret double %calltmp
}


LLVM:

declare double @putchard(double)

define double @printstar(double %n) {
entry:
  ; initial value = 1.0 (inlined into phi)
  br label %loop

loop:       ; preds = %loop, %entry
  %i = phi double [ 1.000000e+00, %entry ], [ %nextvar, %loop ]
  ; body
  %calltmp = call double @putchard(double 4.200000e+01)
  ; increment
  %nextvar = fadd double %i, 1.000000e+00

  ; termination test
  %cmptmp = fcmp ult double %i, %n
  %booltmp = uitofp i1 %cmptmp to double
  %loopcond = fcmp one double %booltmp, 0.000000e+00
  br i1 %loopcond, label %loop, label %afterloop

afterloop:      ; preds = %loop
  ; loop always returns 0.0
  ret double 0.000000e+00
}
